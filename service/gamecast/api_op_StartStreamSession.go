// Code generated by smithy-go-codegen DO NOT EDIT.

package gamecast

import (
	"context"
	"errors"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/aws"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	internalauth "github.com/aws/aws-sdk-go-v2/internal/auth"
	"github.com/aws/aws-sdk-go-v2/service/gamecast/types"
	smithyendpoints "github.com/aws/smithy-go/endpoints"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"time"
)

// Example CLI input aws gamecast start-stream-session --description QA-stream
// --stream-group-id arn:aws:gamecast:us-west-2:123456789012:streamgroup/33gveJpz0
// --protocol WebRTC --signal-request "webrtc-ice-offer-in-text" --user-id xnshijwh
// --connection-timeout-seconds 300 --session-length-seconds 7200
// --additional-launch-args '["-dx11","-fullscreen"]'
// --additional-environment-variables '{"DXVK_HUD": "full"}'
func (c *Client) StartStreamSession(ctx context.Context, params *StartStreamSessionInput, optFns ...func(*Options)) (*StartStreamSessionOutput, error) {
	if params == nil {
		params = &StartStreamSessionInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "StartStreamSession", params, optFns, c.addOperationStartStreamSessionMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*StartStreamSessionOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type StartStreamSessionInput struct {

	// An identifier can be either the resource ID or the ARN associated with the main
	// resource in the API.
	//
	// This member is required.
	Identifier *string

	// The streaming protocol. Only WebRTC for now.
	//
	// This member is required.
	Protocol types.Protocol

	// WebRTC Ice Offer
	//
	// This member is required.
	SignalRequest *string

	// Opaque unique user ID to maintain game saved data.
	//
	// This member is required.
	UserId *string

	// Environment variables to the game runtime environments. For example, session
	// specific user profile or resolution/graphics settings. In theory we support any
	// wine, vulkan, mesa, dxvk, vkd3d environment variables. They are very useful for
	// both debugging and fine-tuning game performance.
	AdditionalEnvironmentVariables map[string]string

	// Additional CLI arguments passed to the executable when launching the
	// application.
	AdditionalLaunchArgs []string

	// An identifier can be either the resource ID or the ARN associated with the main
	// resource in the API.
	ApplicationIdentifier *string

	// Idempotency token.
	ClientToken *string

	// The time that that we wait (in Seconds) for client to connect to the instance
	// (after a stream session is active or after disconnection) before closing the
	// session. Default to 120 seconds.
	ConnectionTimeoutSeconds *int32

	// Descriptive label for the resource, not a unique ID.
	Description *string

	// The time the stream session will shutdown regardless of the player connection
	// state. Default to 43200.
	SessionLengthSeconds *int32

	noSmithyDocumentSerde
}

// GameCast StreamSession provides connection information that clients can use to
// access the stream.
type StartStreamSessionOutput struct {

	// Environment variables to the game runtime environments. For example, session
	// specific user profile or resolution/graphics settings. In theory we support any
	// wine, vulkan, mesa, dxvk, vkd3d environment variables. They are very useful for
	// both debugging and fine-tuning game performance.
	AdditionalEnvironmentVariables map[string]string

	// Additional CLI arguments passed to the executable when launching the
	// application.
	AdditionalLaunchArgs []string

	// ARN of the resource.
	ApplicationArn *string

	// ARN of the resource.
	Arn *string

	// The time that that we wait (in Seconds) for client to connect to the instance
	// (after a stream session is active or after disconnection) before closing the
	// session. Default to 120 seconds.
	ConnectionTimeoutSeconds *int32

	// The last time this resource was updated. Timestamps are in ISO8601 format.
	CreatedAt *time.Time

	// Descriptive label for the resource, not a unique ID.
	Description *string

	// The last time this resource was updated. Timestamps are in ISO8601 format.
	LastUpdatedAt *time.Time

	// Save or log file location uri that points to a GameCast owned S3 location that
	// contains the file. If this is null, it means there is no such file for the
	// stream session.
	LogFileLocationUri *string

	// The streaming protocol. Only WebRTC for now.
	Protocol types.Protocol

	// Save or log file location uri that points to a GameCast owned S3 location that
	// contains the file. If this is null, it means there is no such file for the
	// stream session.
	SaveFileLocationUri *string

	// The time the stream session will shutdown regardless of the player connection
	// state. Default to 43200.
	SessionLengthSeconds *int32

	// WebRTC Ice Offer
	SignalRequest *string

	// WebRTC ICE answer
	SignalResponse *string

	// A list of valid statuses for Stream Session.
	Status types.StreamSessionStatus

	// Status reason is included when stream group is ERROR status.
	StatusReason types.StreamSessionStatusReason

	// GameCast resource ID, base62 encoded.
	StreamGroupId *string

	// Opaque unique user ID to maintain game saved data.
	UserId *string

	// The URL to download the most up-to-date GameCast web SDK protocol file.
	WebSdkProtocolUrl *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationStartStreamSessionMiddlewares(stack *middleware.Stack, options Options) (err error) {
	err = stack.Serialize.Add(&awsRestjson1_serializeOpStartStreamSession{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsRestjson1_deserializeOpStartStreamSession{}, middleware.After)
	if err != nil {
		return err
	}
	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddClientRequestIDMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddComputeContentLengthMiddleware(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = v4.AddComputePayloadSHA256Middleware(stack); err != nil {
		return err
	}
	if err = addRetryMiddlewares(stack, options); err != nil {
		return err
	}
	if err = addHTTPSignerV4Middleware(stack, options); err != nil {
		return err
	}
	if err = awsmiddleware.AddRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addStartStreamSessionResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addIdempotencyToken_opStartStreamSessionMiddleware(stack, options); err != nil {
		return err
	}
	if err = addOpStartStreamSessionValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opStartStreamSession(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = awsmiddleware.AddRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addendpointDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	return nil
}

type idempotencyToken_initializeOpStartStreamSession struct {
	tokenProvider IdempotencyTokenProvider
}

func (*idempotencyToken_initializeOpStartStreamSession) ID() string {
	return "OperationIdempotencyTokenAutoFill"
}

func (m *idempotencyToken_initializeOpStartStreamSession) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	if m.tokenProvider == nil {
		return next.HandleInitialize(ctx, in)
	}

	input, ok := in.Parameters.(*StartStreamSessionInput)
	if !ok {
		return out, metadata, fmt.Errorf("expected middleware input to be of type *StartStreamSessionInput ")
	}

	if input.ClientToken == nil {
		t, err := m.tokenProvider.GetIdempotencyToken()
		if err != nil {
			return out, metadata, err
		}
		input.ClientToken = &t
	}
	return next.HandleInitialize(ctx, in)
}
func addIdempotencyToken_opStartStreamSessionMiddleware(stack *middleware.Stack, cfg Options) error {
	return stack.Initialize.Add(&idempotencyToken_initializeOpStartStreamSession{tokenProvider: cfg.IdempotencyTokenProvider}, middleware.Before)
}

func newServiceMetadataMiddleware_opStartStreamSession(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		SigningName:   "gamecast",
		OperationName: "StartStreamSession",
	}
}

type opStartStreamSessionResolveEndpointMiddleware struct {
	EndpointResolver EndpointResolverV2
	BuiltInResolver  builtInParameterResolver
}

func (*opStartStreamSessionResolveEndpointMiddleware) ID() string {
	return "ResolveEndpointV2"
}

func (m *opStartStreamSessionResolveEndpointMiddleware) HandleSerialize(ctx context.Context, in middleware.SerializeInput, next middleware.SerializeHandler) (
	out middleware.SerializeOutput, metadata middleware.Metadata, err error,
) {
	if awsmiddleware.GetRequiresLegacyEndpoints(ctx) {
		return next.HandleSerialize(ctx, in)
	}

	req, ok := in.Request.(*smithyhttp.Request)
	if !ok {
		return out, metadata, fmt.Errorf("unknown transport type %T", in.Request)
	}

	if m.EndpointResolver == nil {
		return out, metadata, fmt.Errorf("expected endpoint resolver to not be nil")
	}

	params := EndpointParameters{}

	m.BuiltInResolver.ResolveBuiltIns(&params)

	var resolvedEndpoint smithyendpoints.Endpoint
	resolvedEndpoint, err = m.EndpointResolver.ResolveEndpoint(ctx, params)
	if err != nil {
		return out, metadata, fmt.Errorf("failed to resolve service endpoint, %w", err)
	}

	req.URL = &resolvedEndpoint.URI

	for k := range resolvedEndpoint.Headers {
		req.Header.Set(
			k,
			resolvedEndpoint.Headers.Get(k),
		)
	}

	authSchemes, err := internalauth.GetAuthenticationSchemes(&resolvedEndpoint.Properties)
	if err != nil {
		var nfe *internalauth.NoAuthenticationSchemesFoundError
		if errors.As(err, &nfe) {
			// if no auth scheme is found, default to sigv4
			signingName := "gamecast"
			signingRegion := m.BuiltInResolver.(*builtInResolver).Region
			ctx = awsmiddleware.SetSigningName(ctx, signingName)
			ctx = awsmiddleware.SetSigningRegion(ctx, signingRegion)

		}
		var ue *internalauth.UnSupportedAuthenticationSchemeSpecifiedError
		if errors.As(err, &ue) {
			return out, metadata, fmt.Errorf(
				"This operation requests signer version(s) %v but the client only supports %v",
				ue.UnsupportedSchemes,
				internalauth.SupportedSchemes,
			)
		}
	}

	for _, authScheme := range authSchemes {
		switch authScheme.(type) {
		case *internalauth.AuthenticationSchemeV4:
			v4Scheme, _ := authScheme.(*internalauth.AuthenticationSchemeV4)
			var signingName, signingRegion string
			if v4Scheme.SigningName == nil {
				signingName = "gamecast"
			} else {
				signingName = *v4Scheme.SigningName
			}
			if v4Scheme.SigningRegion == nil {
				signingRegion = m.BuiltInResolver.(*builtInResolver).Region
			} else {
				signingRegion = *v4Scheme.SigningRegion
			}
			if v4Scheme.DisableDoubleEncoding != nil {
				// The signer sets an equivalent value at client initialization time.
				// Setting this context value will cause the signer to extract it
				// and override the value set at client initialization time.
				ctx = internalauth.SetDisableDoubleEncoding(ctx, *v4Scheme.DisableDoubleEncoding)
			}
			ctx = awsmiddleware.SetSigningName(ctx, signingName)
			ctx = awsmiddleware.SetSigningRegion(ctx, signingRegion)
			break
		case *internalauth.AuthenticationSchemeV4A:
			v4aScheme, _ := authScheme.(*internalauth.AuthenticationSchemeV4A)
			if v4aScheme.SigningName == nil {
				v4aScheme.SigningName = aws.String("gamecast")
			}
			if v4aScheme.DisableDoubleEncoding != nil {
				// The signer sets an equivalent value at client initialization time.
				// Setting this context value will cause the signer to extract it
				// and override the value set at client initialization time.
				ctx = internalauth.SetDisableDoubleEncoding(ctx, *v4aScheme.DisableDoubleEncoding)
			}
			ctx = awsmiddleware.SetSigningName(ctx, *v4aScheme.SigningName)
			ctx = awsmiddleware.SetSigningRegion(ctx, v4aScheme.SigningRegionSet[0])
			break
		case *internalauth.AuthenticationSchemeNone:
			break
		}
	}

	return next.HandleSerialize(ctx, in)
}

func addStartStreamSessionResolveEndpointMiddleware(stack *middleware.Stack, options Options) error {
	return stack.Serialize.Insert(&opStartStreamSessionResolveEndpointMiddleware{
		EndpointResolver: options.EndpointResolverV2,
		BuiltInResolver: &builtInResolver{
			Region:       options.Region,
			UseDualStack: options.EndpointOptions.UseDualStackEndpoint,
			UseFIPS:      options.EndpointOptions.UseFIPSEndpoint,
			Endpoint:     options.BaseEndpoint,
		},
	}, "ResolveEndpoint", middleware.After)
}
